{"data":{"edges":[],"nodes":[{"data":{"node":{"template":{"_type":"CustomComponent","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Callable\r\nfrom langflow.custom import CustomComponent\r\nfrom langflow.custom.utils import get_function\r\nfrom langflow.field_typing import Code, Tool\r\nfrom langflow.inputs import StrInput\r\nfrom langchain.tools import StructuredTool\r\nfrom langchain_experimental.utilities import PythonREPL\r\nfrom pydantic import BaseModel, Field\r\nimport importlib\r\nfrom loguru import logger\r\n\r\nclass PythonToolComponent(CustomComponent):\r\n    display_name = \"Python Tool\"\r\n    description = \"Define and expose a Python function as a Tool.\"\r\n    icon = \"Python\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"function_code\": {\r\n                \"display_name\": \"Code\",\r\n                \"info\": \"The code for the function.\",\r\n                \"show\": True,\r\n            },\r\n            \"name\": {\r\n                \"display_name\": \"Tool Name\",\r\n                \"info\": \"The name of the tool.\",\r\n                \"value\": \"python_tool\",\r\n                \"show\": True,\r\n            },\r\n            \"global_imports\": {\r\n                \"display_name\": \"Global Imports\",\r\n                \"info\": \"Comma-separated list of modules to import.\",\r\n                \"value\": \"math\",\r\n                \"show\": True,\r\n            }\r\n        }\r\n\r\n    class PythonToolSchema(BaseModel):\r\n        code: str = Field(..., description=\"The Python code to execute\")\r\n\r\n    def get_globals(self, global_imports: str) -> dict:\r\n        global_dict = {}\r\n        modules = [module.strip() for module in global_imports.split(\",\")]\r\n        for module in modules:\r\n            imported_module = importlib.import_module(module)\r\n            global_dict[imported_module.__name__] = imported_module\r\n        return global_dict\r\n\r\n    def build(self, function_code: Code, name: str, global_imports: str) -> Tool:\r\n        _globals = self.get_globals(global_imports)\r\n        python_repl = PythonREPL(_globals=_globals)\r\n        \r\n        # Get the user-defined function\r\n        user_func = get_function(function_code)\r\n        \r\n        def run_tool(code: str) -> str:\r\n            try:\r\n                # Execute user function in REPL environment\r\n                return python_repl.run(code)\r\n            except Exception as e:\r\n                logger.opt(exception=True).debug(\"Error executing Python code\")\r\n                raise ToolException(str(e))\r\n\r\n        tool = StructuredTool.from_function(\r\n            name=name,\r\n            description=self.description,\r\n            func=run_tool,\r\n            args_schema=self.PythonToolSchema\r\n        )\r\n\r\n        self.status = f\"Python Tool created with function: {function_code}\"\r\n        return tool\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"function_code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","name":"function_code","display_name":"Code","advanced":false,"dynamic":false,"info":"The code for the function.","load_from_db":false,"title_case":false,"value":"def analyze_text(text) -> Message:\n    # # Extract text from the Message object\n    # if isinstance(self.input_text, Message):\n    #     text = self.input_text.text\n    # else:\n    #     text = str(self.input_text)\n\n    results = {\n        \"character_count\": len(text),\n        \"sentence_count\": text.count('.') + text.count('!') + text.count('?')\n    }\n\n    if self.include_word_count:\n        results[\"word_count\"] = len(text.split())\n\n    if self.perform_sentiment_analysis:\n        # Basic sentiment analysis\n        text_lower = text.lower()\n        if \"happy\" in text_lower or \"good\" in text_lower:\n            sentiment = \"positive\"\n        elif \"sad\" in text_lower or \"bad\" in text_lower:\n            sentiment = \"negative\"\n        else:\n            sentiment = \"neutral\"\n\n        results[\"sentiment\"] = sentiment\n\n    # Convert the results dictionary to a formatted string\n    formatted_results = \"\\n\".join([f\"{key}: {value}\" for key, value in results.items()])\n\n    # # Return a Message object\n    # return Message(text=formatted_results)\n    return formatted_results"},"global_imports":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"math","fileTypes":[],"file_path":"","name":"global_imports","display_name":"Global Imports","advanced":false,"dynamic":false,"info":"Comma-separated list of modules to import.","load_from_db":false,"title_case":false,"input_types":["Text"]},"name":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"python_tool","fileTypes":[],"file_path":"","name":"name","display_name":"Tool Name","advanced":false,"dynamic":false,"info":"The name of the tool.","load_from_db":false,"title_case":false,"input_types":["Text"]}},"description":"Define and expose a Python function as a Tool.","icon":"Python","base_classes":["BaseTool","Generic","object","Runnable","RunnableSerializable","RunnableSerializable[Union[str, dict, ToolCall], Any]","Serializable","Tool"],"display_name":"Python Component","documentation":"","custom_fields":{"function_code":null,"name":null,"global_imports":null},"output_types":["Tool"],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Tool"],"selected":"Tool","name":"tool","hidden":null,"display_name":"Tool","method":null,"value":"__UNDEFINED__","cache":true,"required_inputs":null}],"field_order":[],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"official":false},"type":"CustomComponent","id":"CustomComponent-YCQzY"},"id":"CustomComponent-YCQzY","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Define and expose a Python function as a Tool.","name":"Python Component","id":"CustomComponent-YCQzY","is_component":true,"last_tested_version":"1.1.1"}