{"data":{"edges":[],"nodes":[{"data":{"node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"#https://github.com/langflow-ai/langflow/discussions/4093\n#https://github.com/langflow-ai/langflow/blob/main/src/backend/base/langflow/base/langchain_utilities/model.py\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.field_typing import Tool\nfrom langchain.tools import StructuredTool\nfrom langflow.schema import Data\nfrom langflow.inputs import MessageTextInput\nimport requests\n\nclass TemperatureComponent(LCToolComponent):\n    name = \"DummyComponent\"\n    display_name = name\n    description = \"Returns hohoho. No real value. Don't use my response.\"\n\n    # inputs = [\n    #     MessageTextInput(\n    #         name=display_name,\n    #         display_name=display_name,\n    #         info=description,\n    #     ),\n    # ]\n\n    # def build_tool(self) -> Tool:\n    #     return Tool(name=\"DummyComponent\", description=\"Returns hohoho. No real value. Don't use my response.\")\n    def _evaluate_expression(self, expression: str) -> list[Data]:\n        result = \"ho..ho..ho\"\n        return Data(data=f\"Call me santa: {result}:)\")\n    \n    def _eval_expr_with_error(self, expression: str) -> list[Data]:\n        try:\n            return self._evaluate_expression(expression)\n        except Exception as e:\n            raise ToolException(str(e)) from e\n    \n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"DummyComponent\",\n            description=\"Returns hohoho. No real value. Don't use my response.\",\n            func=self._eval_expr_with_error,\n            # args_schema=self.CalculatorToolSchema,\n        )\n\n    def run_model(self) -> Data:\n        # Example API call to get the current temperature\n        # response = requests.get(\"https://api.weatherapi.com/v1/current.json?key=YOUR_API_KEY&q=London\")\n        # temperature = response.json().get(\"current\", {}).get(\"temp_c\", \"N/A\")\n        return self._evaluate_expression(self.expression)\n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false}},"description":"Returns hohoho. No real value. Don't use my response.","base_classes":["Data","Tool"],"display_name":"DummyComponent","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":[]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":[]}],"field_order":[],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.1","official":false},"type":"CalculatorTool","id":"CalculatorTool-9MqR9"},"id":"CalculatorTool-9MqR9","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Returns hohoho. No real value. Don't use my response.","name":"DummyComponent","id":"CalculatorTool-9MqR9","is_component":true,"last_tested_version":"1.1.1"}